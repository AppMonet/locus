@title locus
@doc

<a target="_parent" href="https://hex.pm/packages/locus" alt="Hex.pm Package">
    <img src="https://img.shields.io/hexpm/v/locus.svg?style=flat"/></a>
<a target="_parent" href="https://github.com/g-andrade/locus/actions?query=workflow%3Abuild" alt="CI Build Status">
    <img src="https://github.com/g-andrade/locus/workflows/build/badge.svg"/></a>

`locus' is library for Erlang/OTP and Elixir that allows you to pinpoint the country, city or ASN
of IP addresses using <a target="_parent" href="https://dev.maxmind.com/geoip/geoip2/geolite2/">MaxMind GeoIP2</a> and <a href="#alternative-providers">other providers</a>.

The databases will be loaded on-demand and, when retrieved from the network, cached on the filesystem and updated automatically.

<blockquote>
⚠️  For instructions on how to upgrade from to 2.x, check
<a target="_parent" href="https://github.com/g-andrade/locus/blob/master/MIGRATION.md">
`MIGRATION.md'</a>
</blockquote>

<h4>Usage</h4>

<h5>1. Configure your license key</h5>

<b>Skip this step if you're not loading databases directly from MaxMind.</b>

Get a free <a target="_parent" href="https://www.maxmind.com/en/geolite2/signup">license key</a> from MaxMind
if you haven't one already. Once logged in, you'll find the page to generate it
on the left menu, under "My License Key".

Then clone the repository, run `make shell' and declare your key:

<pre lang="erlang" class="erlang">
application:set_env(locus, license_key, "YOUR_LICENSE_KEY").
</pre>

<h5>2. Start the database loader</h5>

<pre lang="erlang"  class="erlang">
ok = locus:start_loader(country, {maxmind, "GeoLite2-Country"}).
% You can also use:
% * an HTTP(S) URL,
% * or a local path, e.g. "/usr/share/GeoIP/GeoLite2-City.mmdb"
% * or a `{custom, Module, Args}` tuple, with `Module'
%   implementing the `locus_custom_fetcher` behaviour.
</pre>

<h5>3. Wait for the database to load (optional)</h5>

<pre lang="erlang" class="erlang">
{ok, _DatabaseVersion} = locus:await_loader(country). % or &#x60;{error, Reason}'
</pre>

<h5>4. Look up IP addresses</h5>

<pre lang="erlang" class="erlang">
<![CDATA[
% > locus:lookup(country, "93.184.216.34").
% > locus:lookup(country, "2606:2800:220:1:248:1893:25c8:1946").

% * `{ok, Entry}' in case of success;
% * `not_found' if no entry was found
% * `{error, _}' if something bad happened

{ok,#{<<"continent">> =>
          #{<<"code">> => <<"NA">>,
            <<"geoname_id">> => 6255149,
            <<"names">> =>
                #{<<"de">> => <<"Nordamerika">>,
                  <<"en">> => <<"North America">>,
                  <<"es">> => <<"Norteamérica"/utf8>>,
                  <<"fr">> => <<"Amérique du Nord"/utf8>>,
                  <<"ja">> => <<"北アメリカ"/utf8>>,
                  <<"pt-BR">> => <<"América do Norte"/utf8>>,
                  <<"ru">> => <<"Северная Америка"/utf8>>,
                  <<"zh-CN">> => <<"北美洲"/utf8>>}},
      <<"country">> =>
          #{<<"geoname_id">> => 6252001,
            <<"iso_code">> => <<"US">>,
            <<"names">> =>
                #{<<"de">> => <<"USA">>,
                  <<"en">> => <<"United States">>,
                  <<"es">> => <<"Estados Unidos">>,
                  <<"fr">> => <<"États-Unis"/utf8>>,
                  <<"ja">> => <<"アメリカ合衆国"/utf8>>,
                  <<"pt-BR">> => <<"Estados Unidos">>,
                  <<"ru">> => <<"США"/utf8>>,
                  <<"zh-CN">> => <<"美国"/utf8>>}},
      <<"registered_country">> =>
          #{<<"geoname_id">> => 6252001,
            <<"iso_code">> => <<"US">>,
            <<"names">> =>
                #{<<"de">> => <<"USA">>,
                  <<"en">> => <<"United States">>,
                  <<"es">> => <<"Estados Unidos">>,
                  <<"fr">> => <<"États-Unis"/utf8>>,
                  <<"ja">> => <<"アメリカ合衆国"/utf8>>,
                  <<"pt-BR">> => <<"Estados Unidos">>,
                  <<"ru">> => <<"США"/utf8>>,
                  <<"zh-CN">> => <<"美国"/utf8>>}}}}
]]>
</pre>

<h4>Documentation</h4>

<ol>
<li><a href="#supported-file-formats">Supported File Formats</a></li>
<li><a href="#database-types-and-loading">Database Types and Loading</a></li>
<li><a href="#database-validation">Database Validation</a></li>
<li><a href="#remote-sources-downloading-and-updating">Remote sources: Downloading and Updating</a></li>
<li><a href="#remote-sources-caching">Remote sources: Caching</a></li>
<li><a href="#local-sources-loading-and-updating">Local sources: Loading and Updating</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#event-subscriptions">Event Subscriptions</a></li>
<li><a href="#api-reference">API Reference</a></li>
<li><a href="#tested-setup">Tested Setup</a></li>
<li><a href="#license">License</a></li>
<li><a href="#alternative-providers">Alternative Providers</a></li>
<li><a href="#alternative-libraries-erlang">Alternative Libraries (Erlang)</a></li>
<li><a href="#alternative-libraries-elixir">Alternative Libraries (Elixir)</a></li>
</ol>

<h5 id="supported-file-formats">Supported File Formats</h5>

<ul>
<li>gzip-compressed tarballs (`.tar.gz', `.tgz')</li>
<li>plain tarballs (`.tar')</li>
<li>MMDB files (`.mmdb')</li>
<li>gzip-compressed MMDB files (`.mmdb.gz')</li>
</ul>

For tarball files, the first file to be found within it with an `.mmdb' extension is the one that's chosen for loading.

The implementation of <a target="_parent" href="https://maxmind.github.io/MaxMind-DB/">MaxMind DB format</a>
is mostly complete.

<h5 id="database-types-and-loading">Database Types and Loading</h5>

<ul>
<li>The free GeoLite2 <a target="_parent" href="https://dev.maxmind.com/geoip/geoip2/geolite2/">Country, City and ASN databases</a>
  were all successfully tested; presumably `locus' can deal with <a href="#alternative-providers">any MMDB database</a> that maps IP address prefixes to arbitrary data
  </li>
<li>The databases are loaded into memory (mostly) as is; reference counted binaries are shared with the
  application callers using
  <a target="_parent" href="https://erlang.org/doc/man/persistent_term.html">`persistent_term'</a>,
  and the original binary search tree is used to lookup addresses.
  The data for each entry is decoded on the fly upon successful lookups.
  </li>
</ul>

<h5 id="database-validation">Database Validation</h5>

Databases, local or remote, can have their compatibility validated through the `locus:check/1'
function after they've been loaded (see <a href="#api-reference">function reference</a>.)

Alternatively, they can also be checked from the command line by use of the `locus' CLI utility:
<ol>
<li>Run `make cli' to build the script, named `locus', which will be deployed to the current directory.</li>
<li>Check the database:
<pre lang="shell" class="shell">
./locus check GeoLite2-City.mmdb
# Loading database from "GeoLite2-City.mmdb"...
# Database version {{2019,11,6},{11,58,0}} successfully loaded
# Checking database for flaws...
# Database is wholesome.
</pre>
</li>
</ol>
The script will exit with code 1 in case of failure, and 0 otherwise.
Warnings can produce failure through the `--warnings-as-errors` flag.
Run `./locus check --help' for a description of supported options and arguments.

<h5 id="remote-sources-downloading-and-updating">Remote sources: Downloading and Updating</h5>

<ul>
<li>The downloaded database files, when compressed, are inflated in memory</li>
<li>The `last-modified' response header, if present, is used to condition subsequent download
  attempts (using `if-modified-since' request headers) in order to save bandwidth
  </li>
<li>The downloaded databases are cached on the filesystem in order to more quickly achieve readiness
  on future launches of the database loader
  </li>
<li>Database download attempts are retried upon error according to an exponential backoff policy
  - quickly at first (every few seconds) but gradually slowing down to every 15 minutes.
  Successful and dismissed download attempts will be checked for update after 6 hours.
  Both of these behaviours can be tweaked through the `error_retries' and `update_period'
  loader settings (see <a href="#api-reference">function reference</a>.)
  </li>
<li>When downloading from a MaxMind edition or an HTTPS URL, the remote certificate will be authenticated
  against <a target="_parent" href="https://hexdocs.pm/tls_certificate_check/">a list of known Certification Authorities</a>
  and connection negotiation will fail in case of an expired certificate, mismatched hostname,
  self-signed certificate or unknown certification authority.
  These checks can be disabled by specifying the `insecure' loader option.
  </li>
</ul>

<h5 id="remote-sources-caching">Remote sources: Caching</h5>

<ul>
<li>Caching is a best effort; the system falls back to relying exclusively on the network if needed</li>
<li>A caching directory named `locus_erlang' is created under the <a target="_parent" href="http://erlang.org/doc/man/filename.html#basedir-3">'user_cache' basedir</a></li>
<li>A cached database is named after either:
    <ul>
        <li>the MaxMind database edition name (when explicitly downloading from MaxMind), or</li>
        <li>the SHA256 hash of the HTTP(S) URL, or</li>
        <li>for `{custom_fetcher, Module, Args}' sources,
            a filesystem-safe version of `Module''s name
            concatenated with the 32-bit
            <a target="_parent" href="https://erlang.org/doc/man/erlang.html#phash2-2">`erlang:phash2/2'</a>
            value of the opaque database source as returned by the callbacks.
        </li>
    </ul>
</li>
<li>Modification time of the databases is retrieved from either:
    <ul>
        <li>the `last-modified' response header (when present, for MaxMind and HTTP(S) sources)</li>
        <li>the `modified_on' metadata property for successful `locus_custom_fetcher:fetch/1'
            and `:conditionally_fetch/2` callbacks (for databases loaded with `locus_custom_fetcher')
        </li>
    </ul>
</li>
<li>Caching can be disabled by specifying the `no_cache' option when running `:start_loader'</li>
</ul>

<h5 id="local-sources-loading-and-updating">Local sources: Loading and Updating</h5>

<ul>
<li>The loaded database files, when compressed, are inflated in memory</li>
<li>The database modification timestamp is used to condition subsequent load
  attempts in order to lower I/O activity
  </li>
<li>Database load attempts are retried upon error according to an exponential backoff policy
  - quickly at first (every few seconds) but gradually slowing down to every 30 seconds.
  Successful and dismissed load attempts will be checked for update after 30 seconds.
  Both of these behaviours can be tweaked through the `error_retries' and `update_period'
  loader settings (see <a href="#api-reference">function reference</a>.)
  </li>
</ul>

<h5 id="logging">Logging</h5>

<ul>
<li>Five logging levels are supported: `debug', `info', `warning', `error' and `none'</li>
<li>The chosen backend is <a target="_parent" href="http://erlang.org/doc/man/logger.html">logger</a>
  <i>if</i> <a target="_parent" href="https://github.com/erlang-lager/lager/">lager</a> is either missing or
  it hasn't <a target="_parent" href="https://github.com/erlang-lager/lager/issues/492">removed</a> `logger''s
  default handler.</li>
<li>The default log level is `error'; it can be changed in the application's `env' config</li>
<li>To tweak the log level in runtime, use `locus_logger:set_loglevel/1'</li>
</ul>

<h5 id="event-subscriptions">Event Subscriptions</h5>

<ul>
<li>Any number of event subscribers can be attached to a database loader by specifying the `{event_subscriber, Subscriber}'
  option when starting the database
  </li>
<li>A `Subscriber' can be either a module implementing the `locus_event_subscriber' behaviour or an arbitrary `pid()'</li>
<li>The format and content of reported events can be consulted in detail on the `locus_event_subscriber' module documentation;
  most key steps in the loader pipeline are reported (download started, download succeeded, download failed,
  caching succeeded, loading failed, etc.)
  </li>
</ul>

<h5 id="api-reference">API Reference</h5>

The API reference can be found on <a target="_parent" href="https://hexdocs.pm/locus/">HexDocs</a>.

<h5 id="tested-setup">Tested setup</h5>

<ul>
<li>Erlang/OTP 22 or newer</li>
<li>rebar3</li>
</ul>

<h5 id="license">License</h5>

MIT License

Copyright (c) 2017-2021 Guilherme Andrade

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

`locus' is an independent project and has not been authorized, sponsored, or
otherwise approved by MaxMind.

<h5 id="alternative-providers">Alternative Providers</h5>

<ul>
<li>
    <a target="_parent" href="https://db-ip.com/db/">DB-IP.com</a>:
    lite databases seem to work but setting up auto-update for them
    is not practical, as there's no "latest" URL.
</li>
</ul>

<h5 id="alternative-libraries-erlang">Alternative Libraries (Erlang)</h5>

<ul>
<li><a target="_parent" href="https://github.com/mochi/egeoip">egeoip</a>: IP Geolocation module, currently supporting the MaxMind GeoLite City Database</li>
<li><a target="_parent" href="https://github.com/brigadier/geodata2">geodata2</a>: Application for working with MaxMind geoip2 (.mmdb) databases</li>
<li><a target="_parent" href="https://github.com/manifest/geoip">geoip</a>: Returns the location of an IP address; based on the ipinfodb.com web service</li>
<li><a target="_parent" href="https://hex.pm/packages/geolite2data">geolite2data</a>: Periodically fetches the free MaxMind GeoLite2 databases</li>
<li><a target="_parent" href="https://github.com/ip2location/ip2location-erlang">ip2location-erlang</a>: Uses IP2Location geolocation database</li>
</ul>

<h5 id="alternative-libraries-elixir">Alternative Libraries (Elixir)</h5>

<ul>
<li><a target="_parent" href="https://hex.pm/packages/asn">asn</a>: IP-to-AS-to-ASname lookup</li>
<li><a target="_parent" href="https://hex.pm/packages/freegeoip">freegeoip</a>: Simple wrapper for freegeoip.net HTTP API</li>
<li><a target="_parent" href="https://hex.pm/packages/freegeoipx">freegeoipx</a>: API Client for freegeoip.net</li>
<li><a target="_parent" href="https://hex.pm/packages/geoip">geoip</a>: Lookup the geo location for a given IP address, hostname or Plug.Conn instance</li>
<li><a target="_parent" href="https://hex.pm/packages/geolix">geolix</a>: MaxMind GeoIP2 database reader/decoder</li>
<li><a target="_parent" href="https://hex.pm/packages/plug_geoip2">plug_geoip2</a>: Adds geo location to a Plug connection based upon the client IP address by using MaxMind's GeoIP2 database</li>
<li><a target="_parent" href="https://hex.pm/packages/tz_world">tz_world</a>: Resolve timezones from a location efficiently using PostGIS and Ecto</li>
</ul>

@end
