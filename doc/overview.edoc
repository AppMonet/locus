@title locus
@doc

<a target="_parent" href="https://hex.pm/packages/locus" alt="Hex.pm Package">
    <img src="https://img.shields.io/hexpm/v/locus.svg?style=flat"/></a>
<a target="_parent" href="https://travis-ci.org/g-andrade/locus" alt="Travis CI Build Status">
    <img src="https://travis-ci.org/g-andrade/locus.png?branch=master"/></a>
<a target="_parent" href="https://circleci.com/gh/g-andrade/locus/tree/master" alt="Circle CI Build Status">
    <img src="https://circleci.com/gh/g-andrade/locus/tree/master.svg?style=svg"/></a>

`locus' is library for Erlang/OTP and Elixir that allows you to pinpoint the country, city or ASN
of IP addresses using MaxMind GeoIP2.

The free <a target="_parent" href="https://dev.maxmind.com/geoip/geoip2/geolite2/">MaxMind databases</a>
you choose are loaded on-demand and, if using HTTP, cached on the filesystem and updated automatically.

You're encouraged to host your own private copies of the databases when using this library in production,
both for reliability and netiquette towards MaxMind.

<h4>Usage</h4>

Clone the repository and run `make console' to bring up a shell.

<h5>1. Start the database loader</h5>

<pre lang="erlang"  class="erlang">
URL = "https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz",
ok = locus:start_loader(country, URL).

% URL can also be a local path, e.g. "/usr/share/GeoIP/GeoLite2-City.mmdb"
</pre>

<h5>2. Wait for the database to load (optional)</h5>

<pre lang="erlang" class="erlang">
% Give up after 30 seconds
{ok, _DatabaseVersion} = locus:wait_for_loader(country, 30000). % {error,timeout}
</pre>

<h5>3. Lookup IP addresses</h5>

<pre lang="erlang" class="erlang">
<![CDATA[
% > locus:lookup(country, "93.184.216.34").
% > locus:lookup(country, "2606:2800:220:1:248:1893:25c8:1946").

{ok,#{prefix => {{93,184,216,0},24},
      <<"continent">> =>
          #{<<"code">> => <<"NA">>,
            <<"geoname_id">> => 6255149,
            <<"names">> =>
                #{<<"de">> => <<"Nordamerika">>,
                  <<"en">> => <<"North America">>,
                  <<"es">> => <<"Norteamérica"/utf8>>,
                  <<"fr">> => <<"Amérique du Nord"/utf8>>,
                  <<"ja">> => <<"北アメリカ"/utf8>>,
                  <<"pt-BR">> => <<"América do Norte"/utf8>>,
                  <<"ru">> => <<"Северная Америка"/utf8>>,
                  <<"zh-CN">> => <<"北美洲"/utf8>>}},
      <<"country">> =>
          #{<<"geoname_id">> => 6252001,
            <<"iso_code">> => <<"US">>,
            <<"names">> =>
                #{<<"de">> => <<"USA">>,
                  <<"en">> => <<"United States">>,
                  <<"es">> => <<"Estados Unidos">>,
                  <<"fr">> => <<"États-Unis"/utf8>>,
                  <<"ja">> => <<"アメリカ合衆国"/utf8>>,
                  <<"pt-BR">> => <<"Estados Unidos">>,
                  <<"ru">> => <<"США"/utf8>>,
                  <<"zh-CN">> => <<"美国"/utf8>>}},
      <<"registered_country">> =>
          #{<<"geoname_id">> => 6252001,
            <<"iso_code">> => <<"US">>,
            <<"names">> =>
                #{<<"de">> => <<"USA">>,
                  <<"en">> => <<"United States">>,
                  <<"es">> => <<"Estados Unidos">>,
                  <<"fr">> => <<"États-Unis"/utf8>>,
                  <<"ja">> => <<"アメリカ合衆国"/utf8>>,
                  <<"pt-BR">> => <<"Estados Unidos">>,
                  <<"ru">> => <<"США"/utf8>>,
                  <<"zh-CN">> => <<"美国"/utf8>>}}}}
]]>
</pre>

<h4>Documentation</h4>

<ol>
<li><a href="#supported-file-formats">Supported File Formats</a></li>
<li><a href="#database-types-and-loading">Database Types and Loading</a></li>
<li><a href="#database-validation">Database Validation</a></li>
<li><a href="#http-urls-downloading-and-updating">HTTP URLs: Downloading and Updating</a></li>
<li><a href="#http-urls-caching">HTTP URLs: Caching</a></li>
<li><a href="#filesystem-urls-loading-and-updating">Filesystem URLs: Loading and Updating</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#event-subscriptions">Event Subscriptions</a></li>
<li><a href="#api-reference">API Reference</a></li>
<li><a href="#tested-setup">Tested Setup</a></li>
<li><a href="#license">License</a></li>
<li><a href="#alternative-libraries-erlang">Alternative Libraries (Erlang)</a></li>
<li><a href="#alternative-libraries-elixir">Alternative Libraries (Elixir)</a></li>
</ol>

<h5 id="supported-file-formats">Supported File Formats</h5>

<ul>
<li>gzip-compressed tarballs (`.tar.gz', `.tgz')</li>
<li>plain tarballs (`.tar')</li>
<li>MMDB files (`.mmdb')</li>
<li>gzip-compressed MMDB files (`.mmdb.gz')</li>
</ul>

For tarballs, the first file to be found with an `.mmdb' extension is the one that's chosen for loading.

The implementation of <a target="_parent" href="https://maxmind.github.io/MaxMind-DB/">MaxMind DB format</a>
is mostly complete.

<h5 id="database-types-and-loading">Database Types and Loading</h5>

<ul>
<li>The free GeoLite2 <a target="_parent" href="https://dev.maxmind.com/geoip/geoip2/geolite2/">Country, City and ASN databases</a>
  were all successfully tested; presumably `locus' can deal with any MaxMind DB 2.x database that maps
  IP address prefixes to arbitrary data, but no <a target="_parent" href="https://dev.maxmind.com/geoip/geoip2/downloadable/">
  commercial databases</a> have yet been tested
  </li>
<li>The databases are loaded into memory (mostly) as is; reference counted binaries are shared with the
  application callers using ETS tables, and the original binary search tree is used to lookup addresses.
  The data for each entry is decoded on the fly upon successful lookups.
  </li>
</ul>

<h5 id="database-validation">Database Validation</h5>

Databases, local or remote, can have their compatibility validated through the `locus:analyze/1'
function after they've been loaded (see <a href="#api-reference">function reference</a>.)

Alternatively, they can also be checked from the command line by use of the `locus' CLI utility:
<ol>
<li>Run `make cli' to build the script, named `locus', which will be deployed to the current directory.</li>
<li>Run analysis:
<pre lang="shell" class="shell">
./locus analyze https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz
# Loading database from "https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz"...
# Database version {{2019,1,22},{11,42,28}} successfully loaded
# Analyzing database for flaws...
# Database is wholesome.
</pre>
</li>
</ol>
The script will exit with code 1 in case of failure, and 0 otherwise.
Run `./locus analyze --help' for a description of supported options and arguments.

<h5 id="http-urls-downloading-and-updating">HTTP URLs: Downloading and Updating</h5>

<ul>
<li>The downloaded database files, when compressed, are inflated in memory</li>
<li>The `last-modified' response header, if present, is used to condition subsequent download
  attempts (using `if-modified-since' request headers) in order to save bandwidth
  </li>
<li>The downloaded databases are cached on the filesystem in order to more quickly achieve readiness
  on future launches of the database loader
  </li>
<li>Until a HTTP database loader achieves readiness, download attempts are made every minute;
  once readiness is achieved (either from cache or network), this interval increases to every 6 hours.
  These can be tweaked using the `pre_readiness_update_period' and `post_readiness_update_period'
  loader settings (in milliseconds.)
  </li>
<li>When downloading from a HTTPS URL, the remote certificate will be authenticated
  against a <a href="https://github.com/certifi/erlang-certifi">list of known Certificate Authorities</a>
  and connection negotiation will fail in case of an expired certificate, mismatched hostname,
  self-signed certificate or unknown certificate authority.
  These checks can be disabled by specifying the `insecure' loader option.
  </li>
</ul>

<h5 id="http-urls-caching">HTTP URLs: Caching</h5>

<ul>
<li>Caching is a best effort; the system falls back to relying exclusively on the network if needed</li>
<li>A caching directory named `locus_erlang' is created under the <a target="_parent" href="http://erlang.org/doc/man/filename.html#basedir-3">'user_cache' basedir</a></li>
<li>Cached databases are named after the SHA256 hash of their source URL</li>
<li>Modification time of the databases is extracted from `last-modified' response header (when present)
  and used to condition downloads on subsequent boots and save bandwidth
  </li>
<li>Caching can be disabled by specifying the `no_cache' option when running `:start_loader'</li>
</ul>

<h5 id="filesystem-urls-loading-and-updating">Filesystem URLs: Loading and Updating</h5>

<ul>
<li>The loaded databases, when compressed, are inflated in memory</li>
<li>Until a filesystem database loader achieves readiness, load attempts are made every 5 seconds;
  once readiness is achieved, this interval increases to every 30 seconds and load attempts are
  dismissed as long as the database file modification timestamp keeps unchanged
  </li>
</ul>

<h5 id="logging">Logging</h5>

<ul>
<li>Five logging levels are supported: `debug', `info', `warning', `error' and `none'</li>
<li>The chosen backend ON OTP 21.1+ is <a target="_parent" href="http://erlang.org/doc/man/logger.html">logger</a>
  <b>if</b> <a target="_parent" href="https://github.com/erlang-lager/lager/">lager</a> is either missing or
  it hasn't <a target="_parent" href="https://github.com/erlang-lager/lager/issues/492">removed</a> `logger''s
  default handler; for all other scenarios,
  <a target="_parent" href="http://erlang.org/doc/man/error_logger.html">error_logger</a> is picked instead
  </li>
<li>The default log level is `error'; it can be changed in the application's `env' config</li>
<li>To tweak the log level in runtime, use `locus_logger:set_loglevel/1'</li>
</ul>

<h5 id="event-subscriptions">Event Subscriptions</h5>

<ul>
<li>Any number of event subscribers can be attached to a database loader by specifying the `{event_subscriber, Subscriber}'
  option when starting the database
  </li>
<li>A `Subscriber' can be either a module implementing the `locus_event_subscriber' behaviour or an arbitrary `pid()'</li>
<li>The format and content of reported events can be consulted in detail on the `locus_event_subscriber' module documentation;
  most key steps in the loader pipeline are reported (download started, download succeeded, download failed,
  caching succeeded, loading failed, etc.)
  </li>
</ul>

<h5 id="api-reference">API Reference</h5>

The API reference can be found on <a target="_parent" href="https://hexdocs.pm/locus/">HexDocs</a>.

<h5 id="tested-setup">Tested setup</h5>

<ul>
<li>Erlang/OTP 18.0 or newer</li>
<li>rebar3</li>
</ul>

<h5 id="license">License</h5>

MIT License

Copyright (c) 2017-2019 Guilherme Andrade

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

`locus' is an independent project and has not been authorized, sponsored, or
otherwise approved by MaxMind.

`locus' includes code extracted from OTP source code, by Ericsson AB,
released under the Apache License 2.0.

<h5 id="alternative-libraries-erlang">Alternative Libraries (Erlang)</h5>

<ul>
<li><a target="_parent" href="https://github.com/mochi/egeoip">egeoip</a>: IP Geolocation module, currently supporting the MaxMind GeoLite City Database</li>
<li><a target="_parent" href="https://github.com/brigadier/geodata2">geodata2</a>: Application for working with MaxMind geoip2 (.mmdb) databases</li>
<li><a target="_parent" href="https://github.com/manifest/geoip">geoip</a>: Returns the location of an IP address; based on the ipinfodb.com web service</li>
<li><a target="_parent" href="https://hex.pm/packages/geolite2data">geolite2data</a>: Periodically fetches the free MaxMind GeoLite2 databases</li>
<li><a target="_parent" href="https://github.com/ip2location/ip2location-erlang">ip2location-erlang</a>: Uses IP2Location geolocation database</li>
</ul>

<h5 id="alternative-libraries-elixir">Alternative Libraries (Elixir)</h5>

<ul>
<li><a target="_parent" href="https://hex.pm/packages/asn">asn</a>: IP-to-AS-to-ASname lookup</li>
<li><a target="_parent" href="https://hex.pm/packages/freegeoip">freegeoip</a>: Simple wrapper for freegeoip.net HTTP API</li>
<li><a target="_parent" href="https://hex.pm/packages/freegeoipx">freegeoipx</a>: API Client for freegeoip.net</li>
<li><a target="_parent" href="https://hex.pm/packages/geoip">geoip</a>: Lookup the geo location for a given IP address, hostname or Plug.Conn instance</li>
<li><a target="_parent" href="https://hex.pm/packages/geolix">geolix</a>: MaxMind GeoIP2 database reader/decoder</li>
<li><a target="_parent" href="https://hex.pm/packages/plug_geoip2">plug_geoip2</a>: Adds geo location to a Plug connection based upon the client IP address by using MaxMind's GeoIP2 database</li>
<li><a target="_parent" href="https://hex.pm/packages/tz_world">tz_world</a>: Resolve timezones from a location efficiently using PostGIS and Ecto</li>
</ul>

@end
